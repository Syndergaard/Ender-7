# !Ender-7
# printer_size: 250x250x300
# version: 3.4
# This file contains pin mappings for the stock 2021 Creality Ender 7.
# To use this config, during "make menuconfig" select the
# STM32F103 with a "28KiB bootloader" and serial (on USART1 PA10/PA9)
# communication.

# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The firmware
# filename must end in ".bin" and must not match the last filename
# that was flashed.

# See docs/Config_Reference.md for a description of parameters.

###fluidd set
[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]

# [exclude_object] # Not supported in current version of Klipper. Must wait for Creality to issue update.

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z4.5 F300
    G90
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
    G28 X Y
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    G1 Y{y_park} F2000
    M84
  CANCEL_PRINT_BASE

[gcode_macro START_PRINT]
  variable_parameter_AREA_START : 0,0
  variable_parameter_AREA_END : 0,0
gcode:
  # Use BED_TEMP and EXTRUDER_TEMP parameters as defined in slicer, otherwise use default values
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}
  M140 S{BED_TEMP} # start heating bed
  M104 S{170}
  M190 S{BED_TEMP}

  G92 E0 # Reset extruder
  G28 # Home all axes
  BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
  BED_MESH_PROFILE LOAD=default # Uncomment to use "default" bed mesh
  # BED_MESH_CALIBRATE [METHOD=manual] # Uncomment to calibrate mesh at start of print

  # Heat Extruder & Bed. Don't continue until heated.
  M109 S{EXTRUDER_TEMP}
  M190 S{BED_TEMP}

  G1 Z2.0 # Z up 2mm
  G1 X10.0 Y20.0 Z0.28 F5000.0 # Move to start position, set feedrate
  #G1 X10.0 Y150.0 Z0.28 F1500.0 E12 ;Draw first line
  #G1 X10.3 Y150.0 Z0.28 F5000.0 ;Move to side a little
  #G1 X10.3 Y20.0 Z0.28 F1500.0 E24 ;Draw second line
  G92 E0 ;Reset Extruder
  G1 Z5.0 F3000 ;Move Z Axis up
  G1 X5.0 Y20.0 Z5.0 F5000.0

[gcode_macro END_PRINT]
gcode:
  G91 # Relative positionning
  G1 E-2 F2700 # Retract a bit
  G1 E-2 Z0.2 F2400 # Retract and raise Z
  G1 X5 Y5 F3000 # Wipe out
  G1 Z10 # Raise Z more
  G90 # Absolute positionning
  G28 X Y # Present print
  M106 S0 # Turn-off fan
  M104 S0 # Turn-off hotend
  M140 S0 # Turn-off bed
  M84 X Y E # Disable all steppers but Z

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 32
rotation_distance: 32
endstop_pin: ^PA5
position_endstop: 0
position_max: 260 # Lost some x-travel by adding CR-Touch
homing_speed: 80

[stepper_y]
step_pin: PB8
dir_pin: !PB7
enable_pin: !PC3
microsteps: 32
rotation_distance: 32
endstop_pin: ^PA6
position_endstop: 255
position_min: 0
position_max: 255
homing_speed: 80

[stepper_z]
step_pin: PB6
dir_pin: PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
# endstop_pin: ^PA7
# position_endstop: 0.0
endstop_pin: probe: z_virtual_endstop
position_max: 300
position_min: -5.0
homing_speed: 30
second_homing_speed: 2.0
homing_retract_dist: 2.0

[bltouch]
sensor_pin: ^PB1
control_pin: PB0
x_offset: 25.0
y_offset: 30.0
z_offset: 3.15
samples: 2
speed:80
pin_up_touch_mode_reports_triggered: False
probe_with_touch_mode: True

[safe_z_home]                 # enable for BLTouch
home_xy_position: 95,110
speed: 100
z_hop: 10
z_hop_speed: 30

[bed_mesh]                    # enable for BLTouch&Probe
speed: 80
mesh_min: 35,30.5
mesh_max: 250,260 # Could go to (249+35,260+25.5), but nozzle can't reach past x=249 and y=26
probe_count: 6,6
mesh_pps: 2,2
fade_start: 1.0
fade_end: 10.0

[extruder]
pressure_advance : 0.3
max_extrude_only_distance: 1000.0
step_pin: PB4
dir_pin: !PB3
enable_pin: !PC3
microsteps: 16
rotation_distance: 22.84
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
control: pid
# tuned for stock hardware with 200 degree Celsius target
pid_kp: 19.028
pid_ki: 0.919
pid_kd: 98.472
min_temp: 0
max_temp: 265

[heater_bed]
heater_pin: PA15
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
control: pid
# tuned for stock hardware with 50 degree Celsius target
pid_kp: 74.146
pid_ki: 1.521
pid_kd: 903.658
min_temp: 0
max_temp: 130

[bed_screws]
screw1: 25, 33
screw2: 230, 33
screw3: 230, 230
screw4: 25, 230

[fan]
pin: PA0

[fan_generic extruder_partfan]
pin: PC6

[mcu]
serial: /dev/serial/by-id/usb_serial_1
restart_method: command

# [mcu rpi]
# serial: /tmp/klipper_host_mcu

# [adxl345]
# cs_pin: rpi:None
# spi_speed: 2000000
# spi_bus: spidev2.0

# [resonance_tester]
# accel_chip: adxl345
# accel_per_hz: 70
# probe_points:
#       125,125,10

[input_shaper]
#shaper_type_x = 2hump_ei
#shaper_freq_x = 118.8
#shaper_type_y = mzv
#shaper_freq_y = 59.4

[filament_switch_sensor filament_sensor]
pause_on_runout: true
switch_pin: !PA4

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 5000
max_z_velocity: 10
max_z_accel: 1000
square_corner_velocity: 5.0

[exclude_object]

[include timelapse.cfg]

[gcode_arcs]
#resolution: 1.0

[gcode_macro G29]				
gcode:
  G28
  bed_mesh_calibrate
  G1 X0 Y0 Z10 F4200

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.073750, 0.058750, 0.053750, 0.058750, 0.078750, 0.082500
#*# 	  0.066250, 0.036250, 0.027500, 0.021250, 0.031250, 0.030000
#*# 	  0.051250, 0.006250, -0.012500, -0.015000, -0.017500, -0.006250
#*# 	  0.015000, -0.032500, -0.053750, -0.060000, -0.048750, -0.028750
#*# 	  -0.017500, -0.072500, -0.097500, -0.097500, -0.078750, -0.011250
#*# 	  -0.013750, -0.085000, -0.112500, -0.113750, -0.072500, -0.006250
#*# tension = 0.2
#*# min_x = 35.0
#*# algo = lagrange
#*# y_count = 6
#*# mesh_y_pps = 2
#*# min_y = 30.5
#*# x_count = 6
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 250.0
#*#
#*# [input_shaper]
#*# shaper_type_x = zv
#*# shaper_freq_x = 81.0
#*# shaper_type_y = mzv
#*# shaper_freq_y = 86.6
